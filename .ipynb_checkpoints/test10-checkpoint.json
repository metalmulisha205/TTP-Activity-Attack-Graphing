{"type": "bundle", "id": "bundle--fa83905a-a920-43ab-86f7-ccfdbd008000", "objects": [{"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--ce0687a0-e692-4b77-964a-0784a8e54ff1", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2020-10-01T01:56:24.776Z", "modified": "2022-04-25T14:00:00.188Z", "name": "Obtain Capabilities", "description": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle.\n\nIn addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals.(Citation: NationsBuying)(Citation: PegasusCitizenLab)\n\nIn addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits.(Citation: DiginotarCompromise)", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "resource-development"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1588", "external_id": "T1588"}, {"source_name": "NationsBuying", "description": "Nicole Perlroth and David E. Sanger. (2013, July 12). Nations Buying as Hackers Sell Flaws in Computer Code. Retrieved March 9, 2017.", "url": "https://www.nytimes.com/2013/07/14/world/europe/nations-buying-as-hackers-sell-computer-flaws.html"}, {"source_name": "PegasusCitizenLab", "description": "Bill Marczak and John Scott-Railton. (2016, August 24). The Million Dollar Dissident: NSO Group\u2019s iPhone Zero-Days used against a UAE Human Rights Defender. Retrieved December 12, 2016.", "url": "https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/"}, {"source_name": "DiginotarCompromise", "description": "Fisher, D. (2012, October 31). Final Report on DigiNotar Hack Shows Total Compromise of CA Servers. Retrieved March 6, 2017.", "url": "https://threatpost.com/final-report-diginotar-hack-shows-total-compromise-ca-servers-103112/77170/"}, {"source_name": "FireEyeSupplyChain", "description": "FireEye. (2014). SUPPLY CHAIN ANALYSIS: From Quartermaster to SunshopFireEye. Retrieved March 6, 2017.", "url": "https://www.mandiant.com/resources/supply-chain-analysis-from-quartermaster-to-sunshop"}, {"source_name": "Analyzing CS Dec 2020", "description": "Maynier, E. (2020, December 20). Analyzing Cobalt Strike for Fun and Profit. Retrieved October 12, 2021.", "url": "https://www.randhome.io/blog/2020/12/20/analyzing-cobalt-strike-for-fun-and-profit/"}, {"source_name": "Splunk Kovar Certificates 2017", "description": "Kovar, R. (2017, December 11). Tall Tales of Hunting with TLS/SSL Certificates. Retrieved October 16, 2020.", "url": "https://www.splunk.com/en_us/blog/security/tall-tales-of-hunting-with-tls-ssl-certificates.html"}, {"source_name": "Recorded Future Beacon Certificates", "description": "Insikt Group. (2019, June 18). A Multi-Method Approach to Identifying Rogue Cobalt Strike Servers. Retrieved October 16, 2020.", "url": "https://www.recordedfuture.com/cobalt-strike-servers/"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Internet Scan: Response Content", "Malware Repository: Malware Metadata", "Malware Repository: Malware Content", "Certificate: Certificate Registration"], "x_mitre_detection": "Consider analyzing malware for features that may be associated with malware providers, such as compiler used, debugging artifacts, code similarities, or even group identifiers associated with specific Malware-as-a-Service (MaaS) offerings. Malware repositories can also be used to identify additional samples associated with the developers and the adversary utilizing their services. Identifying overlaps in malware use by different adversaries may indicate malware was obtained by the adversary rather than developed by them. In some cases, identifying overlapping characteristics in malware used by different adversaries may point to a shared quartermaster.(Citation: FireEyeSupplyChain) Malware repositories can also be used to identify features of tool use associated with an adversary, such as watermarks in [Cobalt Strike](https://attack.mitre.org/software/S0154) payloads.(Citation: Analyzing CS Dec 2020)\n\nConsider use of services that may aid in the tracking of newly issued certificates and/or certificates in use on sites across the Internet. In some cases it may be possible to pivot on known pieces of certificate information to uncover other adversary infrastructure.(Citation: Splunk Kovar Certificates 2017) Some server-side components of adversary tools may have default values set for SSL/TLS certificates.(Citation: Recorded Future Beacon Certificates)\n\nMuch of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on related stages of the adversary lifecycle, such as during Defense Evasion or Command and Control.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.1"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2017-05-31T21:30:49.546Z", "modified": "2022-05-11T14:00:00.188Z", "name": "Command and Scripting Interpreter", "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1059", "external_id": "T1059"}, {"source_name": "Remote Shell Execution in Python", "description": "Abdou Rockikz. (2020, July). How to Execute Shell Commands in a Remote Machine in Python. Retrieved July 26, 2021.", "url": "https://www.thepythoncode.com/article/executing-bash-commands-remotely-in-python"}, {"source_name": "Cisco IOS Software Integrity Assurance - Command History", "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Command History. Retrieved October 21, 2020.", "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#23"}, {"source_name": "Powershell Remote Commands", "description": "Microsoft. (2020, August 21). Running Remote Commands. Retrieved July 26, 2021.", "url": "https://docs.microsoft.com/en-us/powershell/scripting/learn/remoting/running-remote-commands?view=powershell-7.1"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Process: Process Creation", "Module: Module Load", "Process: Process Metadata", "Script: Script Execution", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.\n\nIf scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\n\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows", "Network"], "x_mitre_remote_support": true, "x_mitre_version": "2.3"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2017-05-31T21:30:32.662Z", "modified": "2022-11-08T14:00:00.188Z", "name": "Obfuscated Files or Information", "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1027", "external_id": "T1027"}, {"source_name": "Volexity PowerDuke November 2016", "description": "Adair, S.. (2016, November 9). PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs. Retrieved January 11, 2017.", "url": "https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/"}, {"source_name": "GitHub Revoke-Obfuscation", "description": "Bohannon, D. (2017, July 27). Revoke-Obfuscation. Retrieved February 12, 2018.", "url": "https://github.com/danielbohannon/Revoke-Obfuscation"}, {"source_name": "FireEye Obfuscation June 2017", "description": "Bohannon, D. & Carr N. (2017, June 30). Obfuscation in the Wild: Targeted Attackers Lead the Way in Evasion Techniques. Retrieved February 12, 2018.", "url": "https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html"}, {"source_name": "FireEye Revoke-Obfuscation July 2017", "description": "Bohannon, D. & Holmes, L. (2017, July 27). Revoke-Obfuscation: PowerShell Obfuscation Detection Using Science. Retrieved February 12, 2018.", "url": "https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/revoke-obfuscation-report.pdf"}, {"source_name": "GitHub Office-Crackros Aug 2016", "description": "Carr, N. (2016, August 14). OfficeCrackros. Retrieved February 12, 2018.", "url": "https://github.com/itsreallynick/office-crackros"}, {"source_name": "Linux/Cdorked.A We Live Security Analysis", "description": "Pierre-Marc Bureau. (2013, April 26). Linux/Cdorked.A: New Apache backdoor being used in the wild to serve Blackhole. Retrieved September 10, 2017.", "url": "https://www.welivesecurity.com/2013/04/26/linuxcdorked-new-apache-backdoor-in-the-wild-serves-blackhole/"}, {"source_name": "Carbon Black Obfuscation Sept 2016", "description": "Tedesco, B. (2016, September 23). Security Alert Summary. Retrieved February 12, 2018.", "url": "https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/"}, {"source_name": "PaloAlto EncodedCommand March 2017", "description": "White, J. (2017, March 10). Pulling Back the Curtains on EncodedCommand PowerShell Attacks. Retrieved February 12, 2018.", "url": "https://researchcenter.paloaltonetworks.com/2017/03/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/"}, {"source_name": "capec", "url": "https://capec.mitre.org/data/definitions/267.html", "external_id": "CAPEC-267"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Red Canary", "Christiaan Beek, @ChristiaanBeek"], "x_mitre_data_sources": ["Process: OS API Execution", "Command: Command Execution", "File: File Creation", "Module: Module Load", "Process: Process Creation", "File: File Metadata"], "x_mitre_defense_bypassed": ["Host Forensic Analysis", "Signature-based Detection", "Host Intrusion Prevention Systems", "Application Control", "Log Analysis"], "x_mitre_deprecated": false, "x_mitre_detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). \n\nFlag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) \n\nObfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. \n\nThe first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.3"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2018-04-18T17:59:24.739Z", "modified": "2022-05-11T14:00:00.188Z", "name": "User Execution", "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary, or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204). For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1204", "external_id": "T1204"}, {"source_name": "Telephone Attack Delivery", "description": "Selena Larson, Sam Scholten, Timothy Kromphardt. (2021, November 4). Caught Beneath the Landline: A 411 on Telephone Oriented Attack Delivery. Retrieved January 5, 2022.", "url": "https://www.proofpoint.com/us/blog/threat-insight/caught-beneath-landline-411-telephone-oriented-attack-delivery"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Oleg Skulkin, Group-IB"], "x_mitre_data_sources": ["Container: Container Creation", "Network Traffic: Network Connection Creation", "Container: Container Start", "Instance: Instance Creation", "Instance: Instance Start", "Image: Image Creation", "Process: Process Creation", "Network Traffic: Network Traffic Content", "Command: Command Execution", "Application Log: Application Log Content", "File: File Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) in payloads.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "Windows", "macOS", "IaaS", "Containers"], "x_mitre_remote_support": false, "x_mitre_version": "1.5"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2017-05-31T21:30:38.511Z", "modified": "2022-05-24T14:00:00.188Z", "name": "Masquerading", "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1036", "external_id": "T1036"}, {"source_name": "Twitter ItsReallyNick Masquerading Update", "description": "Carr, N.. (2018, October 25). Nick Carr Status Update Masquerading. Retrieved April 22, 2019.", "url": "https://twitter.com/ItsReallyNick/status/1055321652777619457"}, {"source_name": "Elastic Masquerade Ball", "description": "Ewing, P. (2016, October 31). How to Hunt: The Masquerade Ball. Retrieved October 31, 2016.", "url": "http://pages.endgame.com/rs/627-YBU-612/images/EndgameJournal_The%20Masquerade%20Ball_Pages_R2.pdf"}, {"source_name": "LOLBAS Main Site", "description": "LOLBAS. (n.d.). Living Off The Land Binaries and Scripts (and also Libraries). Retrieved February 10, 2020.", "url": "https://lolbas-project.github.io/"}, {"source_name": "capec", "url": "https://capec.mitre.org/data/definitions/177.html", "external_id": "CAPEC-177"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Oleg Kolesnikov, Securonix", "Nick Carr, Mandiant", "David Lu, Tripwire", "Felipe Esp\u00f3sito, @Pr0teus", "Elastic", "Bartosz Jerzman"], "x_mitre_data_sources": ["Service: Service Creation", "Scheduled Job: Scheduled Job Metadata", "Scheduled Job: Scheduled Job Modification", "Service: Service Metadata", "File: File Metadata", "Image: Image Metadata", "Command: Command Execution", "Process: Process Metadata", "File: File Modification"], "x_mitre_defense_bypassed": ["Application Control"], "x_mitre_deprecated": false, "x_mitre_detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\n\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)\n\nLook for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE\u201d.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows", "Containers"], "x_mitre_version": "1.4"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2017-05-31T21:30:46.977Z", "modified": "2022-05-11T14:00:00.188Z", "name": "Scheduled Task/Job", "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1053", "external_id": "T1053"}, {"source_name": "ProofPoint Serpent", "description": "Campbell, B. et al. (2022, March 21). Serpent, No Swiping! New Backdoor Targets French Entities with Unique Attack Chain. Retrieved April 11, 2022.", "url": "https://www.proofpoint.com/us/blog/threat-insight/serpent-no-swiping-new-backdoor-targets-french-entities-unique-attack-chain"}, {"source_name": "TechNet Task Scheduler Security", "description": "Microsoft. (2005, January 21). Task Scheduler and security. Retrieved June 8, 2016.", "url": "https://technet.microsoft.com/en-us/library/cc785125.aspx"}, {"source_name": "capec", "url": "https://capec.mitre.org/data/definitions/557.html", "external_id": "CAPEC-557"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Prashant Verma, Paladion", "Leo Loobeek, @leoloobeek", "Travis Smith, Tripwire", "Alain Homewood, Insomnia Security", "Andrew Northern, @ex_raritas", "Bryan Campbell, @bry_campbell", "Zachary Abzug, @ZackDoesML", "Selena Larson, @selenalarson"], "x_mitre_data_sources": ["Scheduled Job: Scheduled Job Creation", "Container: Container Creation", "Process: Process Creation", "File: File Modification", "File: File Creation", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \n\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_effective_permissions": ["SYSTEM", "Administrator", "User"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_permissions_required": ["Administrator", "SYSTEM", "User"], "x_mitre_platforms": ["Windows", "Linux", "macOS", "Containers"], "x_mitre_remote_support": true, "x_mitre_version": "2.2"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2017-05-31T21:31:16.408Z", "modified": "2022-10-25T14:00:00.188Z", "name": "Ingress Tool Transfer", "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). \n\nFiles can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016)\n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1105", "external_id": "T1105"}, {"source_name": "University of Birmingham C2", "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}, {"source_name": "t1105_lolbas", "description": "LOLBAS. (n.d.). LOLBAS Mapped to T1105. Retrieved March 11, 2022.", "url": "https://lolbas-project.github.io/#t1105"}, {"source_name": "PTSecurity Cobalt Dec 2016", "description": "Positive Technologies. (2016, December 16). Cobalt Snatch. Retrieved October 9, 2018.", "url": "https://www.ptsecurity.com/upload/corporate/ww-en/analytics/Cobalt-Snatch-eng.pdf"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["John Page (aka hyp3rlinx), ApparitionSec"], "x_mitre_data_sources": ["Network Traffic: Network Connection Creation", "Network Traffic: Network Traffic Flow", "File: File Creation", "Network Traffic: Network Traffic Content"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as [ftp](https://attack.mitre.org/software/S0095), that does not normally occur may also be suspicious.\n\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Specifically, for the finger utility on Windows and Linux systems, monitor command line or terminal execution for the finger command. Monitor network activity for TCP port 79, which is used by the finger utility, and Windows <code>netsh interface portproxy</code> modifications to well-known ports such as 80 and 443. Furthermore, monitor file system for the download/creation and execution of suspicious files, which may indicate adversary-downloaded payloads. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "2.1"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2020-03-14T18:18:32.443Z", "modified": "2021-04-29T14:49:39.188Z", "name": "Non-Standard Port", "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1571", "external_id": "T1571"}, {"source_name": "Symantec Elfin Mar 2019", "description": "Security Response attack Investigation Team. (2019, March 27). Elfin: Relentless Espionage Group Targets Multiple Organizations in Saudi Arabia and U.S.. Retrieved April 10, 2019.", "url": "https://www.symantec.com/blogs/threat-intelligence/elfin-apt33-espionage"}, {"source_name": "Fortinet Agent Tesla April 2018", "description": "Zhang, X. (2018, April 05). Analysis of New Agent Tesla Spyware Variant. Retrieved November 5, 2018.", "url": "https://www.fortinet.com/blog/threat-research/analysis-of-new-agent-tesla-spyware-variant.html"}, {"source_name": "University of Birmingham C2", "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow"], "x_mitre_detection": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}, {"type": "attack-pattern", "spec_version": "2.1", "id": "attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b", "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "created": "2020-03-02T18:45:07.892Z", "modified": "2022-05-11T14:00:00.188Z", "name": "Phishing", "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "initial-access"}], "external_references": [{"source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1566", "external_id": "T1566"}, {"source_name": "capec", "url": "https://capec.mitre.org/data/definitions/98.html", "external_id": "CAPEC-98"}, {"source_name": "Microsoft Anti Spoofing", "description": "Microsoft. (2020, October 13). Anti-spoofing protection in EOP. Retrieved October 19, 2020.", "url": "https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spoofing-protection?view=o365-worldwide"}, {"source_name": "ACSC Email Spoofing", "description": "Australian Cyber Security Centre. (2012, December). Mitigating Spoofed Emails Using Sender Policy Framework. Retrieved October 19, 2020.", "url": "https://www.cyber.gov.au/sites/default/files/2019-03/spoof_email_sender_policy_framework.pdf"}], "object_marking_refs": ["marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"], "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Philip Winther"], "x_mitre_data_sources": ["File: File Creation", "Network Traffic: Network Traffic Content", "Network Traffic: Network Traffic Flow", "Application Log: Application Log Content"], "x_mitre_detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.\n\nFiltering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)\n\nURL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.\n\nBecause most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.\n\nAnti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once [User Execution](https://attack.mitre.org/techniques/T1204) occurs.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5", "x_mitre_platforms": ["Linux", "macOS", "Windows", "SaaS", "Office 365", "Google Workspace"], "x_mitre_version": "2.2"}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--77b333b8-cf13-4408-bda3-b11f83580407", "created": "2023-01-12T19:45:25.087128Z", "modified": "2023-01-12T19:45:25.087128Z", "context": "test", "object_refs": ["attack-pattern--ce0687a0-e692-4b77-964a-0784a8e54ff1"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--17d9c4ea-0069-4d86-9088-1d37e8537236", "created": "2023-01-12T19:45:25.34204Z", "modified": "2023-01-12T19:45:25.34204Z", "context": "test", "object_refs": ["attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--a01f2b77-27b1-4801-a182-3b7cadb3d41d", "created": "2023-01-12T19:45:25.602063Z", "modified": "2023-01-12T19:45:25.602063Z", "context": "test", "object_refs": ["attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--2f561f6f-684c-4a47-9c11-ed79439a2eb5", "created": "2023-01-12T19:45:25.897318Z", "modified": "2023-01-12T19:45:25.897318Z", "context": "test", "object_refs": ["attack-pattern--8c32eb4d-805f-4fc5-bf60-c4d476c131b5"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--491d1615-686e-4426-aeb6-6bd65b958d70", "created": "2023-01-12T19:45:26.169654Z", "modified": "2023-01-12T19:45:26.169654Z", "context": "test", "object_refs": ["attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--8d69c4ec-3fe4-480a-a6d4-67959ee4def7", "created": "2023-01-12T19:45:26.418332Z", "modified": "2023-01-12T19:45:26.418332Z", "context": "test", "object_refs": ["attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--e855d965-4a55-46c0-9d34-0917ae3ca9d3", "created": "2023-01-12T19:45:26.688385Z", "modified": "2023-01-12T19:45:26.688385Z", "context": "test", "object_refs": ["attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--9184392e-8730-4b64-969b-c9d4ebdf37b2", "created": "2023-01-12T19:45:27.032386Z", "modified": "2023-01-12T19:45:27.032386Z", "context": "test", "object_refs": ["attack-pattern--b18eae87-b469-4e14-b454-b171b416bc18"], "labels": ["Seed"]}, {"type": "grouping", "spec_version": "2.1", "id": "grouping--d0629aa1-fdef-4322-9f42-69a56e0acdf3", "created": "2023-01-12T19:45:27.337549Z", "modified": "2023-01-12T19:45:27.337549Z", "context": "test", "object_refs": ["attack-pattern--a62a8db3-f23a-4d8f-afd6-9dbc77e7813b"], "labels": ["Seed"]}]}